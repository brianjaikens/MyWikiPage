<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - MyWikiPage</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/MyWikiPage.styles.css" asp-append-version="true" />
    <!-- Bootstrap Icons for refresh button and theme toggle -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css">
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
            <div class="container">
                <a class="navbar-brand" asp-area="" asp-page="/Index">MyWikiPage</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-page="/Index">
                                <i class="bi bi-house"></i> Wiki
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-page="/Wiki">
                                <i class="bi bi-gear"></i> Manage
                            </a>
                        </li>
                    </ul>
                    <div class="d-flex align-items-center">
                        <!-- Theme Toggle Buttons -->
                        <div class="btn-group me-3" role="group" aria-label="Theme selector">
                            <button type="button" class="btn btn-outline-secondary btn-sm theme-toggle" data-theme="light" title="Light Mode">
                                <i class="bi bi-sun"></i>
                            </button>
                            <button type="button" class="btn btn-outline-secondary btn-sm theme-toggle" data-theme="dark" title="Dark Mode">
                                <i class="bi bi-moon"></i>
                            </button>
                        </div>
                        <!-- Refresh Button -->
                        <button type="button" class="btn btn-outline-secondary btn-sm" title="Refresh Wiki Content" id="refreshButton">
                            <i class="bi bi-arrow-clockwise"></i>
                        </button>
                    </div>
                </div>
            </div>
        </nav>
    </header>
    
    <!-- Toast Container -->
    <div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 1055;">
        <div id="refreshToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header">
                <i class="bi bi-arrow-clockwise me-2 text-primary"></i>
                <strong class="me-auto">Wiki Refresh</strong>
                <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
            <div class="toast-body" id="toastMessage">
                <!-- Message will be inserted here -->
            </div>
        </div>
    </div>

    <div class="container">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>

    <footer class="border-top footer text-muted">
        <div class="container">
            &copy; 2025 - MyWikiPage
        </div>
    </footer>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>

    <script>
        // Theme Management
        function initializeTheme() {
            const savedTheme = localStorage.getItem('theme') || 'light';
            setTheme(savedTheme);
        }

        function setTheme(theme) {
            document.documentElement.setAttribute('data-theme', theme);
            localStorage.setItem('theme', theme);
            
            // Store theme in cookie for server-side access
            document.cookie = `theme=${theme}; path=/; max-age=31536000`; // 1 year
            
            // Update navbar classes based on theme
            const navbar = document.querySelector('.navbar');
            const navLinks = document.querySelectorAll('.nav-link, .navbar-brand, .dropdown-item');
            
            if (theme === 'dark') {
                navbar.classList.remove('navbar-light', 'bg-white');
                navbar.classList.add('navbar-dark', 'bg-dark');
                navLinks.forEach(link => {
                    link.classList.remove('text-dark');
                    link.classList.add('text-light');
                });
            } else {
                navbar.classList.remove('navbar-dark', 'bg-dark');
                navbar.classList.add('navbar-light', 'bg-white');
                navLinks.forEach(link => {
                    link.classList.remove('text-light');
                    link.classList.add('text-dark');
                });
            }
            
            // Update active theme button
            document.querySelectorAll('.theme-toggle').forEach(btn => {
                btn.classList.remove('active');
                if (btn.dataset.theme === theme) {
                    btn.classList.add('active');
                }
            });
        }

        // Handle refresh button functionality
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize theme
            initializeTheme();
            
            // Theme toggle functionality
            document.querySelectorAll('.theme-toggle').forEach(button => {
                button.addEventListener('click', function() {
                    const theme = this.dataset.theme;
                    setTheme(theme);
                });
            });
            
            const refreshButton = document.getElementById('refreshButton');
            const refreshToast = document.getElementById('refreshToast');
            const toastMessage = document.getElementById('toastMessage');
            
            if (refreshButton) {
                refreshButton.addEventListener('click', async function(e) {
                    e.preventDefault();
                    
                    const button = e.target.closest('button');
                    const icon = button.querySelector('i');
                    
                    // Add spinning animation and disable button temporarily
                    if (icon) {
                        icon.classList.add('spinning');
                    }
                    button.disabled = true;
                    
                    try {
                        // First, refresh the wiki generation
                        const response = await fetch('/Wiki?handler=RefreshAjax', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/x-www-form-urlencoded',
                                'X-Requested-With': 'XMLHttpRequest'
                            }
                        });
                        
                        if (!response.ok) {
                            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                        }
                        
                        const result = await response.json();
                        
                        if (!result.success) {
                            throw new Error(result.message || 'Failed to refresh wiki');
                        }
                        
                        // Refresh wiki content if we're on the home page and have the refresh function
                        setTimeout(() => {
                            if (typeof window.refreshWikiContent === 'function') {
                                window.refreshWikiContent();
                            } else {
                                // If no refresh function, reload the page
                                window.location.reload();
                            }
                        }, 500);
                        
                        // Show success toast
                        toastMessage.textContent = result.message || 'Wiki pages have been successfully generated!';
                        const toastHeader = refreshToast.querySelector('.toast-header');
                        const toastIcon = toastHeader.querySelector('i');
                        
                        toastHeader.classList.remove('bg-success', 'bg-danger', 'text-white');
                        toastHeader.classList.add('bg-success', 'text-white');
                        toastIcon.className = 'bi bi-check-circle me-2 text-white';
                        
                        const toast = new bootstrap.Toast(refreshToast, {
                            delay: 2000,
                            autohide: true
                        });
                        toast.show();
                        
                    } catch (error) {
                        console.error('Error during refresh:', error);
                        
                        // Show error toast
                        const errorMessage = error.message || 'Failed to refresh wiki. Please try again.';
                        toastMessage.textContent = errorMessage;
                        const toastHeader = refreshToast.querySelector('.toast-header');
                        const toastIcon = toastHeader.querySelector('i');
                        
                        toastHeader.classList.remove('bg-success', 'bg-danger', 'text-white');
                        toastHeader.classList.add('bg-danger', 'text-white');
                        toastIcon.className = 'bi bi-exclamation-triangle me-2 text-white';
                        
                        const toast = new bootstrap.Toast(refreshToast, {
                            delay: 4000,
                            autohide: true
                        });
                        toast.show();
                    } finally {
                        // Re-enable button and stop spinning
                        setTimeout(() => {
                            button.disabled = false;
                            if (icon) {
                                icon.classList.remove('spinning');
                            }
                        }, 500);
                    }
                });
            }
        });
    </script>

    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>